import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
from matplotlib.colors import to_hex as rgb2hex
from sqlalchemy import create_engine
# import psycopg2
import sqlite3
import os
import urllib.request
import gdown
from datetime import datetime


# ---- –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ----

@st.cache_data
def load_data():
    # df = pd.read_excel("defects.xlsx") - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–æ—Å—å —Ä–∞–Ω–µ–µ
    
    # # !!!!!!–ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è  –¥–ª—è PostgreSQL
    # engine = create_engine("postgresql+psycopg2://postgres:@localhost:5432/defects")
    # query = "SELECT * FROM defects" 
    # df = pd.read_sql(query, engine)

    # DB_URL = "https://drive.google.com/uc?export=download&id=18rFP7h9Dwv6jh-juwTGVfF_PXuI63rdr"
    # DB_FILE = "defects.sqlite"

    DB_ID = "18rFP7h9Dwv6jh-juwTGVfF_PXuI63rdr"
    DB_URL = f"https://drive.google.com/uc?id={DB_ID}"
    DB_FILE = "defects.sqlite"


    gdown.download(DB_URL, DB_FILE, quiet=False)

    # –°–∫–∞—á–∏–≤–∞–µ–º –ë–î
    if not os.path.exists(DB_FILE):
        with st.spinner("–°–∫–∞—á–∏–≤–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö..."):
            urllib.request.urlretrieve(DB_URL, DB_FILE)



    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ SQLite
    conn = sqlite3.connect(DB_FILE)
    df = pd.read_sql("SELECT * FROM defects", conn)
    conn.close()
      
    df["molding_date"] = pd.to_datetime(df["molding_date"])
    df["month_year"] = df["molding_date"].dt.strftime("%b %y")
    df["Week"] = df["molding_date"].dt.to_period("W").astype(str)
    df["month_start"] = df["molding_date"].dt.to_period("M").dt.to_timestamp()
    # –î–æ–±–∞–≤–ª—è–µ–º –≥–æ–¥ –∏ –º–µ—Å—è—Ü –≤ –¥–∞—Ç–∞—Ñ—Ä–µ–π–º
    df["year"] = df["molding_date"].dt.year
    df["month"] = df["molding_date"].dt.month
    return df

df = load_data()

st.markdown(
    """
    <style>
        .main {
            max-width: 95vw;  /* –¥–µ–ª–∞–µ–º —à–∏—Ä–µ –æ—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ,  75% –æ—Ç —à–∏—Ä–∏–Ω—ã –æ–∫–Ω–∞ */
            padding-left: 3rem;
            padding-right: 3rem;
        }
    </style>
    """,
    unsafe_allow_html=True)

# ---- SIDEBAR ----

# –®–∏—Ä–∏–Ω–∞ —Å–∞–π–¥–±–∞—Ä–∞
st.markdown("""
    <style>
        section[data-testid="stSidebar"] {
            width: 200px !important;  /* —Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞—Ç—å —à–∏—Ä–∏–Ω—É */
        }
    </style>
""", unsafe_allow_html=True)

# –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.sidebar.header("üìä –§i–ª—å—Ç—Ä–∏")

# –§–∏–ª—å—Ç—Ä –ø–æ –¥–µ—Ç–∞–ª—è–º 

part_name_mapping = {
    'frame': '–†–∞–º–∞',
    'beam': '–ë–∞–ª–∫–∞',
    'draft_yoke': '–¢—è–≥–æ–≤–µ —è—Ä–º–æ',
    'coupler_1008': '–ê–≤—Ç–æ–∑—á–µ–ø 1008',
    'coupler_1028': '–ê–≤—Ç–æ–∑—á–µ–ø 1028',
    'plate_stopper': '–ü–ª–∞—Å—Ç–∏–Ω–∞-—É–ø–æ—Ä',
    'front_stopper': '–ü–µ—Ä–µ–¥–Ω—ñ–π —É–ø–æ—Ä',
    'rear_stopper': '–ó–∞–¥–Ω—ñ–π —É–ø–æ—Ä'
}
part_options_raw = sorted(df["part_name"].dropna().unique().tolist())
part_options_ukr = [part_name_mapping.get(part, part) for part in part_options_raw]
reverse_mapping = {part_name_mapping.get(k, k): k for k in part_options_raw}
selected_parts_ukr = st.sidebar.multiselect("–í–∏–±–µ—Ä—ñ—Ç—å –¥–µ—Ç–∞–ª—å:", ["–£—Å—ñ"] + part_options_ukr, default=["–£—Å—ñ"])
if "–£—Å—ñ" in selected_parts_ukr:
    selected_parts = part_options_raw
else:
    selected_parts = [reverse_mapping[name] for name in selected_parts_ukr]

# –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ–¥—É
years = sorted(df["year"].dropna().unique().tolist())
selected_years = st.sidebar.multiselect("–†i–∫:", ["–£—Å—ñ"] + years, default=["–£—Å—ñ"])
if "–£—Å—ñ" in selected_years:
    selected_years = years

# –§–∏–ª—å—Ç—Ä –ø–æ –º–µ—Å—è—Ü—É
months = sorted(df["month"].dropna().unique())
month_names = {1: "Ci—á–µ–Ω—å", 2: "–õ—é—Ç–∏–π", 3: "–ë–µ—Ä–µ–∑–µ–Ω—å", 4: "–ö–≤i—Ç–µ–Ω—å", 5: "–¢—Ä–∞–≤–µ–Ω—å", 6: "–ß–µ—Ä–≤–µ–Ω—å",
               7: "–õ–∏–ø–µ–Ω—å", 8: "–°–µ—Ä–ø–µ–Ω—å", 9: "–í–µ—Ä–µ—Å–µ–Ω—å", 10: "–ñ–æ–≤—Ç–µ–Ω—å", 11: "–õ–∏—Å—Ç–æ–ø–∞–¥", 12: "–ì—Ä—É–¥–µ–Ω—å"}
month_labels = ["–£—Å—ñ"] + [month_names[m] for m in months]
selected_month_labels = st.sidebar.multiselect("–úi—Å—è—Ü—å:", month_labels, default=["–£—Å—ñ"])

# –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –º–µ—Å—è—Ü—ã –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∏—Å–ª–∞
if "–£—Å—ñ" in selected_month_labels:
    selected_months = months
else:
    selected_months = [k for k, v in month_names.items() if v in selected_month_labels]

# ---- –§–ò–õ–¨–¢–†–ê–¶–ò–Ø ----

filtered_df = df[
    (df["part_name"].isin(selected_parts)) &
    (df["year"].isin(selected_years)) &
    (df["month"].isin(selected_months))
]

# ---- –¢–ê–ë–´ (–í–ö–õ–ê–î–ö–ò) ----

tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "–î–∏–Ω–∞–º—ñ–∫–∞ –ø–æ –º—ñ—Å—è—Ü—è—Ö",
    "–û–±—Ä—É–±–Ω–∏–∫–∏",
    "–ë—Ä–∞–∫ –∑–∞ —Ç–∏–∂–Ω—è–º–∏",
    "t¬∞C –∑–∞–ª–∏–≤–∫–∏ vs % –±—Ä–∞–∫—É",
    "–ó–∞–∫—ñ–Ω—á–µ–Ω—ñ –ø–ª–∞–≤–∫–∏"
])

# ---- –û–°–ù–û–í–ù–û–ô –ö–û–ù–¢–ï–ù–¢ ----

with tab1:

    # 1. –õ–∏–Ω–∏—è –¥–∏–Ω–∞–º–∏–∫–∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    st.markdown("<h3 style='font-size:20px;'>–î–∏–Ω–∞–º—ñ–∫–∞ –±—Ä–∞–∫—É –ø–æ –º—ñ—Å—è—Ü—è—Ö</h3>", unsafe_allow_html=True)

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –º–µ—Å—è—Ü–µ–≤ –æ—Ç –º–∏–Ω –¥–æ –º–∞–∫—Å
    all_months = pd.date_range(
        start=filtered_df["molding_date"].min().to_period("M").to_timestamp(),
        end=filtered_df["molding_date"].max().to_period("M").to_timestamp(),
        freq="MS"
    )

    # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –º–µ—Å—è—Ü–∞–º
    filtered_df["month_start"] = filtered_df["molding_date"].dt.to_period("M").dt.to_timestamp()
    monthly_data = (
        filtered_df.groupby("month_start")
        .agg(total=("cast_id", "count"), defects=("rejected", "sum"))
        .reindex(all_months, fill_value=0) 
        .reset_index()
        .rename(columns={"index": "month_start"})
    )

    # –í—ã—á–∏—Å–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç –±—Ä–∞–∫–∞

    monthly_data["defect_percent"] = monthly_data.apply(
        lambda row: 0 if row["total"] == 0 else 100 * row["defects"] / row["total"],
        axis=1
    )
    monthly_data["defect_label"] = monthly_data["defect_percent"].round(1).astype(str) + "%"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∏ —Ç–æ–ª—å–∫–æ –∫–∞–∂–¥—ã–µ 6 –º–µ—Å—è—Ü–µ–≤
    tickvals = pd.date_range(
        start=monthly_data["month_start"].min(),
        end=monthly_data["month_start"].max(),
        freq="6MS"
    )

    # –°–æ–∑–¥–∞—ë–º —Ñ–∏–≥—É—Ä—É —Å –¥–≤—É–º—è —Ç–∏–ø–∞–º–∏ –≥—Ä–∞—Ñ–∏–∫–æ–≤
    fig1 = go.Figure()

    # 1. –°—Ç–æ–ª–±–∏–∫–∏ ‚Äî –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ª–∏–≤–æ–∫ (–Ω–∞ –≤—Ç–æ—Ä—É—é –æ—Å—å)
    fig1.add_trace(go.Bar(
        x=monthly_data["month_start"],
        y=monthly_data["total"],
        name="–ö-—Å—Ç—å –≤—ñ–¥–ª–∏–≤–æ–∫",
        marker_color="lightgray",
        opacity=0.4,
        yaxis="y2"
    ))

    # 2. –õ–∏–Ω–∏—è ‚Äî % –±—Ä–∞–∫–∞
    fig1.add_trace(go.Scatter(
        x=monthly_data["month_start"],
        y=monthly_data["defect_percent"],
        mode="lines+markers",
        name="% –±—Ä–∞–∫—É",
        marker=dict(color="orange"),
        line=dict(color="orange"),
        hovertemplate="%{x|%b %Y}: %{y:.1f}%<extra></extra>"
    ))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Å–µ–π
    fig1.update_layout(
        xaxis=dict(
            tickmode="array",
            tickvals=tickvals,
            tickformat="%b %Y",
            tickangle=-45,
            tickfont=dict(size=10)
        ),
        yaxis=dict(
            title="% –±—Ä–∞–∫—É",
            rangemode="tozero",
            side="left"
        ),
        yaxis2=dict(
            title="–ö-—Å—Ç—å –≤—ñ–¥–ª–∏–≤–æ–∫",
            overlaying="y",
            side="right",
            showgrid=False
        ),
        legend=dict(orientation="h", y=1.1, x=0),
        margin=dict(t=30),
        height=500
    )

    # –í—ã–≤–æ–¥–∏–º –≥—Ä–∞—Ñ–∏–∫
    st.plotly_chart(fig1, use_container_width=False)


    # --- –ù–∏–∂–Ω—è—è —á–∞—Å—Ç—å: –¥–≤–∞ –≥—Ä–∞—Ñ–∏–∫–∞ —Ä—è–¥–æ–º ---
    col1, col2 = st.columns([2.5, 1])

    with col1:
        st.markdown("<h3 style='font-size:18px;'>üîù –¢–æ–ø-10 –¥–µ—Ñ–µ–∫—Çi–≤</h3>", unsafe_allow_html=True)

        total_casts = filtered_df["cast_id"].nunique()

        top_defects = (
            filtered_df[filtered_df["rejected"] == 1]
            .groupby("defects")
            .size()
            .reset_index(name="count")
            .sort_values("count", ascending=False)
            .head(10)
        )

        top_defects["percent"] = 100 * top_defects["count"] / total_casts
        top_defects = top_defects.sort_values("percent", ascending=True)

        fig2 = px.bar(
            top_defects,
            x="percent",
            y="defects",
            orientation="h",
            labels={"percent": "% –±—Ä–∞–∫—É", "defects": ""},
            text=top_defects["percent"].apply(lambda x: f"{x:.1f}%"),
            color_discrete_sequence=["#6BA5A4"]
        )

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞
        fig2.update_traces(
            textposition="outside",
            textfont_size=10  #  —Ä–∞–∑–º–µ—Ä —Ç–µ–∫—Å—Ç–∞ 
        )

        # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ + –∑–∞–ø–∞—Å (30‚Äì50%) –¥–ª—è —Ç–µ–∫—Å—Ç–∞
        max_percent = top_defects["percent"].max()
        x_range_max = max_percent * 1.5  # –ú–æ–∂–µ—à—å –ø–æ–∏–≥—Ä–∞—Ç—å—Å—è —Å —ç—Ç–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º

        fig2.update_layout(
            xaxis=dict(
                tickformat=".1f",
                range=[0, x_range_max]
            ),
            width=900,
            height=400,
            margin=dict(r=10, l=150)  # —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π –æ—Ç—Å—Ç—É–ø —Å–ø—Ä–∞–≤–∞
        )
        st.plotly_chart(fig2, use_container_width=True)

    with col2:
        st.markdown("<h3 style='font-size:18px;'>–í–∏–Ω–Ωi</h3>", unsafe_allow_html=True)

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        filtered_df["vinovn"] = (
            filtered_df["vinovn"]
            .fillna("‚Äî")
            .astype(str)
            .str.strip()
            .str.replace(r"\s+", " ", regex=True)
            .str.upper()
        )

        defective_df = filtered_df[filtered_df["rejected"] == 1].copy()
        defective_df = defective_df.drop_duplicates(subset=["cast_id"])
        total_defects = defective_df["cast_id"].nunique()

        vinovn_stats = (
            filtered_df.groupby(["vinovn"], dropna=False)
            .agg(defects=("rejected", "sum"))
            .reset_index()
        )
        vinovn_stats["defect_percent"] = 100 * vinovn_stats["defects"] / total_defects
        vinovn_stats = vinovn_stats.sort_values("defect_percent", ascending=False)

        # –û—Å—Ç–∞–≤–∏–º —Ç–æ–ø 8 –≤–∏–Ω–æ–≤–Ω—ã—Ö, –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –æ–±—ä–µ–¥–∏–Ω–∏–º –≤ "–Ü–Ω—à—ñ"
        top_n = 8
        top_vinovn = vinovn_stats.head(top_n).copy()
        other_sum = vinovn_stats["defects"].iloc[top_n:].sum()
        other_percent = vinovn_stats["defect_percent"].iloc[top_n:].sum()

        if other_sum > 0:
            other_row = pd.DataFrame([{
                "vinovn": "–Ü–ù–®–Ü",
                "defects": other_sum,
                "defect_percent": other_percent
            }])
            top_vinovn = pd.concat([top_vinovn, other_row], ignore_index=True)

        colors = [
        "#6BA5A4",  # –°–µ—Ä–æ-–±–∏—Ä—é–∑–æ–≤—ã–π (–æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π)
        "#F4A261",  # –°–≤–µ—Ç–ª–æ-–æ—Ä–∞–Ω–∂–µ–≤—ã–π (–∞–∫—Ü–µ–Ω—Ç)
        "#E76F51",  # –¢–µ—Ä—Ä–∞–∫–æ—Ç–æ–≤–æ-–∫—Ä–∞—Å–Ω—ã–π (–æ—à–∏–±–∫–∏)
        "#2A9D8F",  # –ë–∏—Ä—é–∑–æ–≤—ã–π
        "#264653",  # –¢—ë–º–Ω–æ-—Å–∏–Ω–∏–π (–Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–π)
        "#E9C46A",  # –ñ—ë–ª—Ç—ã–π-–ø–µ—Å–æ—á–Ω—ã–π (–≤–Ω–∏–º–∞–Ω–∏–µ)
        "#A8DADC",  # –ì–æ–ª—É–±–æ–π —Ö–æ–ª–æ–¥–Ω—ã–π
        "#457B9D",  # –°–∏–Ω–∏–π —Å—Ç–∞–ª—å–Ω–æ–π
        "#B5838D"   # –ü—ã–ª—å–Ω–æ-—Ä–æ–∑–æ–≤—ã–π (–Ω–∞ —Ñ–æ–Ω–µ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã—Ö —Ö–æ—Ä–æ—à–æ —Å–º–æ—Ç—Ä–∏—Ç—Å—è)
        ]

        # –ü–æ–Ω—á–∏–∫–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞
        fig3 = go.Figure()
        fig3.add_trace(go.Pie(
            labels=top_vinovn["vinovn"],
            values=top_vinovn["defects"],
            hole=0.4,
            textinfo="label+percent",
            insidetextorientation="radial",
            marker=dict(colors=colors[:len(top_vinovn)])
        ))
        fig3.update_layout(
            height=400,
            margin=dict(t=30),
            showlegend=True
        )
        st.plotly_chart(fig3, use_container_width=True)

#------------------------------------------------------------------------------------------

with tab2:
    st.write("Test deploy")
   

#---------------------------------------------------------------------------------------
with tab3:

    # 3. –î–µ—Ñ–µ–∫—Ç—ã –≤ –ø–ª–∞–≤–∫–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7-8 –Ω–µ–¥–µ–ª—å

    #–ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown("<h3 style='font-size:20px;'>–°–µ—Ä–µ–¥–Ω—è –∫i–ª—å–∫i—Å—Ç—å –±—Ä–∞–∫—É –Ω–∞ –ø–ª–∞–≤–∫—É –∑–∞ –æ—Å—Ç–∞–Ω–Ωi 8 —Ç–∏–∂–Ωi–≤</h3>", unsafe_allow_html=True)


    filtered_df['pour_date'] = pd.to_datetime(df['pour_date'], errors='coerce')
    filtered_df = filtered_df.dropna(subset=['pour_date', 'melt_num', 'rejected'])

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ø–ª–∞–≤–∫–∞–º
    melt_defects = filtered_df.groupby('melt_num').agg({
        'rejected': 'sum',
        'pour_date': 'first'
    }).reset_index()

    # –ù–∞—Ö–æ–¥–∏–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ –Ω–µ–¥–µ–ª–∏
    melt_defects['week_start'] = melt_defects['pour_date'] - pd.to_timedelta(melt_defects['pour_date'].dt.weekday, unit='d')

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –Ω–∞—á–∞–ª—É –Ω–µ–¥–µ–ª–∏
    weekly_defects = melt_defects.groupby('week_start')['rejected'].mean().reset_index()
    weekly_defects = weekly_defects.sort_values('week_start')

    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 –Ω–µ–¥–µ–ª—å
    last_8_weeks = weekly_defects.tail(8)

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ —Å—Ä–µ–¥–Ω–µ–µ –∑–∞ —ç—Ç–∏ 8 –Ω–µ–¥–µ–ª—å
    overall_mean = last_8_weeks['rejected'].mean()

    fig = go.Figure()

    # –°—Ç–æ–ª–±—Ü—ã
    fig.add_trace(go.Bar(
        x=last_8_weeks['week_start'],
        y=last_8_weeks['rejected'],
        name='–°–µ—Ä–µ–¥–Ω—è –∫i–ª—å–∫i—Å—Ç—å –±—Ä–∞–∫—É –Ω–∞ –ø–ª–∞–≤–∫—É',
        marker_color='royalblue',
    ))

    # –õ–∏–Ω–∏—è —Å—Ä–µ–¥–Ω–µ–≥–æ
    fig.add_trace(go.Scatter(
        x=last_8_weeks['week_start'],
        y=[overall_mean]*len(last_8_weeks),
        mode='lines',
        name=f'–°–µ—Ä–µ–¥–Ω—î ({overall_mean:.2f})',
        line=dict(color='orange', dash='dash')
    ))

    fig.update_layout(
        title="",
        xaxis_title="–ü–æ—á–∞—Ç–æ–∫ —Ç–∏–∂–Ω—è",
        yaxis_title="–°–µ—Ä–µ–¥–Ω—è –∫i–ª—å–∫i—Å—Ç—å –±—Ä–∞–∫—É –Ω–∞ –ø–ª–∞–≤–∫—É",
        legend_title="",
        bargap=0.3,
        template="simple_white",
        xaxis_tickformat="%d-%m-%Y" 
    )

    st.plotly_chart(fig, use_container_width=True)


# ---------------------------------------------------------------------------------
with tab4:

    st.markdown("<h3 style='font-size:20px;'>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞–ª–∏–≤–∫–∏ vs % –±—Ä–∞–∫—É (–ø–æ–ºi—Å—è—á–Ω–æ)</h3>", unsafe_allow_html=True)

    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—ã –∫ –º–µ—Å—è—Ü—É
    filtered_df['month'] = filtered_df['pour_date'].dt.to_period('M').dt.to_timestamp()

    # –ê–≥—Ä–µ–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    monthly_stats = (
        filtered_df.groupby('month')
        .agg(
            avg_temp=('tempk', 'mean'),
            total_casts=('cast_id', 'count'),
            defects=('rejected', 'sum')
        )
        .reset_index()
    )

    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –º–µ—Å—è—Ü–µ–≤
    full_range = pd.date_range(
        start=filtered_df['month'].min(),
        end=filtered_df['month'].max(),
        freq='MS'  # "Month Start"
    )

    # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –ø–æ–ª–Ω–æ–º—É –¥–∏–∞–ø–∞–∑–æ–Ω—É –º–µ—Å—è—Ü–µ–≤
    monthly_stats = monthly_stats.set_index('month').reindex(full_range).reset_index().rename(columns={'index': 'month'})

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
    monthly_stats['defects'] = monthly_stats['defects'].fillna(0)
    monthly_stats['total_casts'] = monthly_stats['total_casts'].fillna(0)
    monthly_stats['avg_temp'] = monthly_stats['avg_temp']  # –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å NaN

    # –†–∞—Å—á—ë—Ç % –±—Ä–∞–∫–∞
    monthly_stats['defect_percent'] = monthly_stats.apply(
        lambda row: 100 * row['defects'] / row['total_casts'] if row['total_casts'] > 0 else 0,
        axis=1
    )

    # –ì—Ä–∞—Ñ–∏–∫
    fig_temp = go.Figure()

    # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    fig_temp.add_trace(go.Scatter(
        x=monthly_stats['month'],
        y=monthly_stats['avg_temp'],
        mode='lines+markers',
        name='–°–µ—Ä–µ–¥–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞–ª–∏–≤–∫–∏',
        yaxis='y2',
        line=dict(color='royalblue'),
        connectgaps=False,
        hovertemplate='%{x|%b %Y}<br>–¢–µ–º–ø: %{y:.0f} ¬∞C<extra></extra>'
    ))

    # % –±—Ä–∞–∫–∞
    fig_temp.add_trace(go.Scatter(
        x=monthly_stats['month'],
        y=monthly_stats['defect_percent'],
        mode='lines+markers',
        name='% –±—Ä–∞–∫—É',
        line=dict(color='orange'),
        hovertemplate='%{x|%b %Y}<br>–ë—Ä–∞–∫: %{y:.1f}%<extra></extra>'
    ))

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Å–µ–π
    fig_temp.update_layout(
        xaxis=dict(
            title='–ú—ñ—Å—è—Ü—å',
            tickformat='%b %Y',
            tickangle=-45,
            dtick="M3"
        ),
        yaxis=dict(title='% –±—Ä–∞–∫—É', rangemode='tozero'),
        yaxis2=dict(
            title='–°–µ—Ä–µ–¥–Ω—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –∑–∞–ª–∏–≤–∫–∏',
            overlaying='y',
            side='right',
            showgrid=False
        ),
        legend=dict(orientation='h', y=1.15),
        height=500,
        margin=dict(t=30),
        template="simple_white"
    )

    st.plotly_chart(fig_temp, use_container_width=True)

# -------------------------------------------------------------------------------------

with tab5:
    # –ú–∞—Ç—Ä–∏—Ü–∞ —Å –±—Ä–∞–∫–æ–º –ø–æ –ø–ª–∞–≤–∫–∞–º

    st.markdown("<h3 style='font-size:20px;'>üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–∫—ñ–Ω—á–µ–Ω–∏–º –ø–ª–∞–≤–∫–∞–º (–ø–æ—Ç–æ—á–Ω–∏–π —Äi–∫)</h3>", unsafe_allow_html=True)

    # --- 1. –§—ñ–ª—å—Ç—Ä—É—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Ä—ñ–∫ ---
    filtered_df['pour_date'] = pd.to_datetime(filtered_df['pour_date'], errors='coerce')
    current_year = pd.Timestamp.now().year
    filtered_df_current = filtered_df[filtered_df['pour_date'].dt.year == current_year].copy()

    # --- 2. –í–∏–∑–Ω–∞—á–∞—î–º–æ, —á–∏ –¥–µ—Ç–∞–ª—å –æ–±—Ä–æ–±–ª–µ–Ω–∞ (–≤–∏–ø—É—â–µ–Ω–∞ –∞–±–æ –∑–∞–±—Ä–∞–∫–æ–≤–∞–Ω–∞) ---
    filtered_df_current['is_finished'] = (
        (filtered_df_current['rejected'] == 1) |
        (filtered_df_current[['datas1', 'datas2', 'datas3']].notnull().any(axis=1))
    )

    # --- 3. –ì—Ä—É–ø—É—î–º–æ –ø–æ –ø–ª–∞–≤–∫–∞—Ö ---
    melt_group = filtered_df_current.groupby('melt_num').agg(
        total_parts=('cast_id', 'count'),
        finished_parts=('is_finished', 'sum')
    ).reset_index()

    # --- 4. –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ç—ñ –ø–ª–∞–≤–∫–∏, –¥–µ –≤—Å—ñ –¥–µ—Ç–∞–ª—ñ –æ–±—Ä–æ–±–ª–µ–Ω—ñ ---
    melt_group['all_finished'] = melt_group['total_parts'] == melt_group['finished_parts']
    finished_melts = melt_group[melt_group['all_finished']]['melt_num']

    # --- 5. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ—Å—å –Ω–∞–∑–∞–¥ –¥–æ –¥–µ—Ç–∞–ª–µ–π, –∞–ª–µ —Ç—ñ–ª—å–∫–∏ –¥–ª—è "–∑–∞–∫—ñ–Ω—á–µ–Ω–∏—Ö" –ø–ª–∞–≤–æ–∫ ---
    final_details = filtered_df_current[filtered_df_current['melt_num'].isin(finished_melts)].copy()

    # --- 6. –î–ª—è –∫–æ–∂–Ω–æ—ó –ø–ª–∞–≤–∫–∏ —Ä–∞—Ö—É—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ –∑–∞–±—Ä–∞–∫–æ–≤–∞–Ω–∏—Ö ---
    melt_defect_stats = final_details.groupby('melt_num').agg(
        total_parts=('cast_id', 'count'),
        finished_parts=('is_finished', 'sum'),   # –¥–æ–±–∞–≤–ª—è–µ–º —Å—é–¥–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –¥–µ—Ç–∞–ª–µ–π
        defects=('rejected', 'sum')
    ).reset_index()

    # –†–∞—Ö—É—î–º–æ –≤—ñ–¥—Å–æ—Ç–æ–∫ –±—Ä–∞–∫—É
    melt_defect_stats['defect_percent'] = 100 * melt_defect_stats['defects'] / melt_defect_stats['total_parts']

    # --- 7. –°–æ—Ä—Ç—É—î–º–æ –∑–∞ —Å–ø–∞–¥–∞–Ω–Ω—è–º –≤—ñ–¥—Å–æ—Ç–∫–∞ –±—Ä–∞–∫—É ---
    melt_defect_stats = melt_defect_stats.sort_values(by='defect_percent', ascending=False)

    # --- 8. –°—Ç–≤–æ—Ä—é—î–º–æ —Ñ—ñ–Ω–∞–ª—å–Ω—É —Ç–∞–±–ª–∏—Ü—é ---
    matrix = melt_defect_stats[['melt_num', 'finished_parts', 'defect_percent']]


    # --- 9. –°—Ç–∏–ª—ñ–∑—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é ---
    styled_matrix = matrix.style.background_gradient(
        subset=["defect_percent"],
        cmap="Reds",
        low=0,
        high=1
    ).format({"defect_percent": "{:.1f}%"})

    # --- 10. –í—ñ–¥–æ–±—Ä–∞–∂–∞—î–º–æ –∑ –ø—Ä–æ–∫—Ä—É—Ç–∫–æ—é ---
    st.dataframe(styled_matrix, use_container_width=True)


# -------------------------------------------------------------------------------------

